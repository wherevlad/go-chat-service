name: Go

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/chat-server"
  IMAGE_NAME: "crud-server"
  ENV_FILE: ${{ secrets.ENV_FILE }}
  CERTIFICATE: ${{ secrets.CERTIFICATE }}
  KEY_FILE: ${{ secrets.KEY_FILE }}

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose.yaml
        copy:
          src: docker-compose.yaml
          dest: ${{ vars.SERVICE_PATH }}/docker-compose.yaml
          mode: 0644

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,ENV_FILE, CERTIFICATE, KEY_FILE
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # go to project directory
            cd ${{ vars.SERVICE_PATH }}
            
            # create .env
            echo "TAG_NAME=$TAG_NAME" > .env
            echo "$ENV_FILE" >> .env
            
            # create service.pem
            echo "$CERTIFICATE" > service.pem
            
            # create service.key
            echo "$KEY_FILE" > service.key
            
            # Login into registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
            docker compose pull
            
            # Stop running services
            docker compose --profile server down
            
            # Run services
            docker compose --profile server up -d
            
            # Remove old images
            docker image prune -a -f
            
            # Logout registry
            docker logout